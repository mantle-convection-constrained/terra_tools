"""
This example shows how interpolation between points on a
spherical triangle appears.

The first function (`example_three_points`) creates three
arbitrary points on the sphere and demonstrates that the
values taken between the corners vary linearly (in great
circle distance).

The second (`example_terra`) uses a subset of the TERRA mesh
at ~22 km spacing and applies a smooth function, which we then
interpolate between, demonstrating that the field is correctly
interpolated.
"""

import matplotlib.pyplot as plt
import numpy as np

from terratools.terra_model import TerraModel
from terratools.geographic import triangle_interpolation

def example_points():
    p1 = (-1, 1)
    p2 = (1, 2)
    p3 = (0, -1)
    points = [p1, p2, p3]
    x = [x for x, y in points]
    y = [y for x, y in points]
    return points, x, y

def grid(lon1, lon2, lat1, lat2, delta):
    lons = np.arange(lon1, lon2, delta)
    lats = np.arange(lat1, lat2, delta)
    return lons, lats


def example_three_points():
    """
    Example of triangular interpolation on the sphere for three
    arbitrary points.
    """
    points, x, y = example_points()
    values = [1, 1, 2]

    delta = 0.1
    lons, lats = grid(-1, 1, -1, 2, delta)
    nlon = len(lons)
    nlat = len(lats)

    interpolated_values = np.empty((nlon, nlat))

    for i in range(nlon):
        for j in range(nlat):
            interpolated_values[i,j] = triangle_interpolation(
                lons[i], lats[j],
                *points[0], values[0], *points[1], values[1], *points[2], values[2]
            )

    plt.rcParams.update({'font.sans-serif': 'Arial'})
    # plt.pcolormesh(lons, lats, np.transpose(interpolated_values))
    plt.contour(lons, lats, np.transpose(interpolated_values))
    plt.scatter(x, y, c=values, edgecolors="white")
    plt.colorbar()
    plt.xlabel("Longitude / deg")
    plt.ylabel("Latitude / deg")
    plt.show()


def example_terra(method="triangle"):
    """
    Use a subset of the TERRA grid
    """
    lon = np.array([-1.999144  , -1.9898466 , -1.9838371 , -1.9792215 , -1.96875   ,
       -1.8812904 , -1.8755815 , -1.8660082 , -1.8650247 , -1.8544186 ,
       -1.8507428 , -1.8438231 , -1.8356657 , -1.8333588 , -1.7328794 ,
       -1.7295803 , -1.7189952 , -1.717633  , -1.7084136 , -1.7025653 ,
       -1.6979562 , -1.6875    , -1.5997196 , -1.5940454 , -1.5845027 ,
       -1.5835497 , -1.5729895 , -1.5694548 , -1.5625464 , -1.5543994 ,
       -1.5520973 , -1.4513466 , -1.4480861 , -1.437547  , -1.4362961 ,
       -1.4271026 , -1.4212936 , -1.416691  , -1.40625   , -1.3181597 ,
       -1.312517  , -1.3031386 , -1.3020824 , -1.2916594 , -1.2881341 ,
       -1.2812468 , -1.2731439 , -1.2708435 , -1.1699444 , -1.1665921 ,
       -1.1561902 , -1.1549591 , -1.1457915 , -1.1399784 , -1.1353952 ,
       -1.125     , -1.0367194 , -1.0217636 , -1.0209206 , -1.0206989 ,
       -1.0103216 , -1.0068026 , -0.99993956, -0.99183416, -0.98955154,
       -0.8885422 , -0.87494415, -0.87483335, -0.8736221 , -0.8644805 ,
       -0.85866314, -0.85409945, -0.84375   , -0.74052536, -0.74039936,
       -0.72923696, -0.7290786 , -0.7289915 , -0.72548187, -0.71863997,
       -0.71057874, -0.7082977 , -0.59237677, -0.59228516, -0.5832961 ,
       -0.5832328 , -0.5831695 , -0.5773914 , -0.5728342 , -0.5625    ,
       -0.4443198 , -0.44426253, -0.4441938 , -0.43754536, -0.43745032,
       -0.43741074, -0.4373633 , -0.4293124 , -0.42703632, -0.2962113 ,
       -0.29614258, -0.29611966, -0.29164806, -0.29163224, -0.29158476,
       -0.29156893, -0.28125   , -0.1481257 , -0.14809133, -0.14806843,
       -0.14805697, -0.14586167, -0.14582996, -0.14580622, -0.1457904 ,
       -0.14578249,  0.        ,  0.        ,  0.        ,  0.        ,
        0.        ,  0.        ,  0.        ,  0.        ,  0.14578249,
        0.1457904 ,  0.14580622,  0.14582996,  0.14586167,  0.14805697,
        0.14806843,  0.14809133,  0.1481257 ,  0.28125   ,  0.29156893,
        0.29158476,  0.29163224,  0.29164806,  0.29611966,  0.29614258,
        0.2962113 ,  0.42703632,  0.4293124 ,  0.4373633 ,  0.43741074,
        0.43745032,  0.43754536,  0.4441938 ,  0.44426253,  0.4443198 ,
        0.5625    ,  0.5728342 ,  0.5773914 ,  0.5831695 ,  0.5832328 ,
        0.5832961 ,  0.59228516,  0.59237677,  0.7082977 ,  0.71057874,
        0.71863997,  0.72548187,  0.7289915 ,  0.7290786 ,  0.72923696,
        0.74039936,  0.74052536,  0.84375   ,  0.85409945,  0.85866314,
        0.8644805 ,  0.8736221 ,  0.87483335,  0.87494415,  0.8885422 ,
        0.98955154,  0.99183416,  0.99993956,  1.0068026 ,  1.0103216 ,
        1.0206989 ,  1.0209206 ,  1.0217636 ,  1.0367194 ,  1.125     ,
        1.1353952 ,  1.1399784 ,  1.1457915 ,  1.1549591 ,  1.1561902 ,
        1.1665921 ,  1.1699444 ,  1.2708435 ,  1.2731439 ,  1.2812468 ,
        1.2881341 ,  1.2916594 ,  1.3020824 ,  1.3031386 ,  1.312517  ,
        1.3181597 ,  1.40625   ,  1.416691  ,  1.4212936 ,  1.4271026 ,
        1.4362961 ,  1.437547  ,  1.4480861 ,  1.4513466 ,  1.5520973 ,
        1.5543994 ,  1.5625464 ,  1.5694548 ,  1.5729895 ,  1.5835497 ,
        1.5845027 ,  1.5940454 ,  1.5997196 ,  1.6875    ,  1.6979562 ,
        1.7025653 ,  1.7084136 ,  1.717633  ,  1.7189952 ,  1.7295803 ,
        1.7328794 ,  1.8333588 ,  1.8356657 ,  1.8438231 ,  1.8507428 ,
        1.8544186 ,  1.8650247 ,  1.8660082 ,  1.8755815 ,  1.8812904 ,
        1.96875   ,  1.9792215 ,  1.9838371 ,  1.9898466 ,  1.999144  ],
      dtype=np.float32)

    lat = np.array([ 1.007552  , -0.84391516,  0.5037672 , -0.42194933,  0.        ,
        1.7633377 , -1.8988204 ,  1.2594837 , -1.4769531 , -1.0549296 ,
        0.75564736, -0.63292104,  0.25188443, -0.21097535,  1.5113649 ,
       -1.687935  , -1.2659019 ,  1.0075235 , -0.84388924,  0.5037739 ,
       -0.42195478,  0.        ,  1.7632502 , -1.8987463 ,  1.2593942 ,
       -1.4768775 , -1.0548527 ,  0.7556485 , -0.6329217 ,  0.2518849 ,
       -0.21097563,  1.511258  , -1.6878394 , -1.2658103 ,  1.0075625 ,
       -0.84392124,  0.5037685 , -0.42195007,  0.        ,  1.7631137 ,
       -1.8986311 ,  1.2594218 , -1.4767607 , -1.054875  ,  0.7556749 ,
       -0.6329433 ,  0.2518851 , -0.21097572,  1.5112808 , -1.687703  ,
       -1.2658281 ,  1.0075772 , -0.8439329 ,  0.5037765 , -0.4219563 ,
        0.        ,  1.7631195 ,  1.2594255 , -1.8989807 , -1.4767641 ,
       -1.0548772 ,  0.75567734, -0.63294464,  0.25188687, -0.21097675,
        1.5112671 , -1.687856  , -1.2658155 ,  1.0075676 , -0.8439242 ,
        0.5037724 , -0.42195234,  0.        ,  1.7632809 ,  1.2594047 ,
       -1.8991119 , -1.4768952 , -1.0548588 ,  0.75565517, -0.63292557,
        0.25188702, -0.21097685,  1.511395  ,  1.0075338 , -1.6879653 ,
       -1.2659193 , -0.84389526,  0.50377905, -0.4219578 ,  0.        ,
        1.7633885 ,  1.2595123 ,  0.75565624, -1.8991992 , -1.4769826 ,
       -1.0549462 , -0.6329262 ,  0.2518875 , -0.21097714,  1.5114824 ,
        1.0075742 ,  0.5037736 , -1.6880308 , -1.2659904 , -0.84392804,
       -0.42195308,  0.        ,  1.7634424 ,  1.2595392 ,  0.7556832 ,
        0.25188768, -1.899243  , -1.4770263 , -1.0549681 , -0.63294804,
       -0.21097723, -1.6880527 , -1.2660067 , -0.84393895, -0.42195854,
        0.        ,  0.50378036,  1.0075877 ,  1.5115026 , -0.21097723,
       -0.63294804, -1.0549681 , -1.4770263 , -1.899243  ,  0.25188768,
        0.7556832 ,  1.2595392 ,  1.7634424 ,  0.        , -0.42195308,
       -0.84392804, -1.2659904 , -1.6880308 ,  0.5037736 ,  1.0075742 ,
        1.5114824 , -0.21097714,  0.2518875 , -0.6329262 , -1.0549462 ,
       -1.4769826 , -1.8991992 ,  0.75565624,  1.2595123 ,  1.7633885 ,
        0.        , -0.4219578 ,  0.50377905, -0.84389526, -1.2659193 ,
       -1.6879653 ,  1.0075338 ,  1.511395  , -0.21097685,  0.25188702,
       -0.63292557,  0.75565517, -1.0548588 , -1.4768952 , -1.8991119 ,
        1.2594047 ,  1.7632809 ,  0.        , -0.42195234,  0.5037724 ,
       -0.8439242 ,  1.0075676 , -1.2658155 , -1.687856  ,  1.5112671 ,
       -0.21097675,  0.25188687, -0.63294464,  0.75567734, -1.0548772 ,
       -1.4767641 , -1.8989807 ,  1.2594255 ,  1.7631195 ,  0.        ,
       -0.4219563 ,  0.5037765 , -0.8439329 ,  1.0075772 , -1.2658281 ,
       -1.687703  ,  1.5112808 , -0.21097572,  0.2518851 , -0.6329433 ,
        0.7556749 , -1.054875  , -1.4767607 ,  1.2594218 , -1.8986311 ,
        1.7631137 ,  0.        , -0.42195007,  0.5037685 , -0.84392124,
        1.0075625 , -1.2658103 , -1.6878394 ,  1.511258  , -0.21097563,
        0.2518849 , -0.6329217 ,  0.7556485 , -1.0548527 , -1.4768775 ,
        1.2593942 , -1.8987463 ,  1.7632502 ,  0.        , -0.42195478,
        0.5037739 , -0.84388924,  1.0075235 , -1.2659019 , -1.687935  ,
        1.5113649 , -0.21097535,  0.25188443, -0.63292104,  0.75564736,
       -1.0549296 , -1.4769531 ,  1.2594837 , -1.8988204 ,  1.7633377 ,
        0.        , -0.42194933,  0.5037672 , -0.84391516,  1.007552  ],
      dtype=np.float32)

    model = TerraModel(lon, lat, [3480, 6370])
    vp = model.new_field("vp")
    nradii = len(model.get_radii())

    # Dummy field
    for i in range(nradii):
        vp[i,:] = np.sin(np.radians(lat)) * np.cos(100*np.radians(lon))

    delta = 0.1
    gridlon, gridlat = grid(-2, 2, -2, 2, delta)
    nlon, nlat = len(gridlon), len(gridlat)

    interpolated_values = np.empty((nlon, nlat))
    for i in range(nlon):
        for j in range(nlat):
            interpolated_values[i,j] = model.evaluate(
                gridlon[i], gridlat[j], 5000, "vp", method=method
            )

    plt.pcolormesh(gridlon, gridlat, np.transpose(interpolated_values))
    plt.scatter(lon, lat, edgecolors="white", s=0.5)
    plt.colorbar()
    plt.show()

if __name__ == "__main__":
    example_terra()
    example_terra(method="nearest")
